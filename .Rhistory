ModelDataFactored <- na.omit(ModelDataFactored)
TestDataFactored <- na.omit(TestDataFactored)
set.seed(0305)
index <- createDataPartition(ModelDataFactored$CKD, p = 0.75, list = FALSE)
training <- ModelDataFactored[index,]
testing <- ModelDataFactored[-index,]
rf.tuning <- tuneRF(training[,-33], training$CKD, stepFactor=1.5)
rf <- randomForest(CKD~., data = training, ntree = 1000, mtry = 5)
varImpPlot(rf, main = "Variable importance")
predVector <- predict(rf, newdata = testing)
predVector
table <- table(predVector, testing$CKD)
confusionMatrix(table, positive = "No")
TestDataRF <- TestDataFactored
TestDataRF$CKD <- predict(rf, newdata = TestDataRF, type="class")
write.csv(TestDataRF, file = "RandomForest.csv", row.names = F, quote = F)
TestDataRF <- NULL
TestDataLR <- TestDataFactored
set.seed(0305)
index <- createDataPartition(ModelDataFactored$CKD, p = 0.75, list = FALSE)
training <- ModelDataFactored[index,]
testing <- ModelDataFactored[-index,]
LogRes <- glm(CKD~., data = training, family="binomial")
TestDataLR$CKD <- predict(LogRes, newdata = TestDataLR, type="class")
TestDataLR$CKD <- predict(LogRes, newdata = TestDataLR, type="response") > 0.5
TestDataLR <- TestDataFactored
TestDataLR$CKD <- predict(LogRes, newdata = TestDataLR, type="response")
rm(list = ls())
ModelData <- read.csv("CKD Screening Data for Model Building.csv")
TestData <- read.csv("CKD Screening Data for Testing.csv")
levels(TestData$Racegrp) <- levels(ModelData$Racegrp)
levels(TestData$CareSource) <- levels(ModelData$CareSource)
ModelData$ID <- NULL
TestData$ID <- NULL
ModelData$X <- NULL
TestData$X <- NULL
ModelDataFactored <- ModelData
TestDataFactored <- TestData
source("Model-Factorize.R")
source("Test-Factorize.R")
ModelDataFactored <- na.omit(ModelDataFactored)
TestDataFactored <- na.omit(TestDataFactored)
set.seed(0305)
index <- createDataPartition(ModelDataFactored$CKD, p = 0.75, list = FALSE)
training <- ModelDataFactored[index,]
testing <- ModelDataFactored[-index,]
LogRes <- glm(CKD~., data = training, family="binomial")
summary(LogRes)
TestDataLR <- TestDataFactored
TestDataLR$CKD <- predict(LogRes, newdata = TestDataLR, type="response")
rm(list=ls())
levels(TestData$Racegrp)
ModelData <- read.csv("CKD Screening Data for Model Building.csv")
TestData <- read.csv("CKD Screening Data for Testing.csv")
levels(TestData$Racegrp)
levels(ModelData$Racegrp)
levels(ModelData$Racegrp) <- levels(TestData$Racegrp)
View(ModelData)
ModelData <- na.omit(ModelData)
TestData <- na.omit(TestData)
levels(ModelData$Racegrp) <- levels(TestData$Racegrp)
levels(TestData$CareSource) <- levels(ModelData$CareSource)
rm(list=ls())
ModelData <- read.csv("CKD Screening Data for Model Building.csv")
TestData <- read.csv("CKD Screening Data for Testing.csv")
ModelData <- na.omit(ModelData)
TestData <- na.omit(TestData)
rm(list=ls())
ModelData <- read.csv("CKD Screening Data for Model Building.csv")
TestData <- read.csv("CKD Screening Data for Testing.csv")
ModelData <- na.omit(ModelData)
ModelData <- read.csv("CKD Screening Data for Model Building.csv")
TestData <- read.csv("CKD Screening Data for Testing.csv")
ModelData <- ModelData[1:6000,]
levels(ModelData$Racegrp) <- levels(TestData$Racegrp)
levels(ModelData$Racegrp)
factor(ModelData$Racegrp)
levels(ModelData$Racegrp)
ModelData$Racegrp <- droplevels(ModelData$Racegrp)
levels(ModelData$Racegrp)
levels(ModelData$CareSource)
ModelData$CareSource <- droplevels(ModelData$CareSource)
levels(ModelData$CareSource)
ModelData <- na.omit(ModelData)
ModelData <- read.csv("CKD Screening Data for Model Building.csv")
TestData <- read.csv("CKD Screening Data for Testing.csv")
ModelData <- ModelData[1:6000,]
View(ModelData)
rm(list=ls())
ModelData <- read.csv("CKD Screening Data for Model Building.csv")
TestData <- read.csv("CKD Screening Data for Testing.csv")
ModelData$ID <- NULL
TestData$ID <- NULL
ModelData$X <- NULL
TestData$X <- NULL
ModelData <- ModelData[1:6000,]
ModelData$Racegrp <- droplevels(ModelData$Racegrp)
ModelData <- na.omit(ModelData)
TestData <- na.omit(TestData)
ModelData <- ModelData[-5394,]
ModelData <- ModelData[-5934,]
rm(list=ls())
ModelData <- read.csv("CKD Screening Data for Model Building.csv")
TestData <- read.csv("CKD Screening Data for Testing.csv")
ModelData$ID <- NULL
TestData$ID <- NULL
ModelData$X <- NULL
TestData$X <- NULL
ModelData <- na.omit(ModelData)
TestData <- na.omit(TestData)
ModelData <- ModelData[-5934,]
ModelData <- ModelData[-5934]
ModelData <- ModelData[c(1:5933,5935:6000),]
View(ModelData)
rm(list=ls())
r
ModelData <- read.csv("CKD Screening Data for Model Building.csv")
TestData <- read.csv("CKD Screening Data for Testing.csv")
ModelData$ID <- NULL
TestData$ID <- NULL
ModelData$X <- NULL
TestData$X <- NULL
ModelData <- na.omit(ModelData)
TestData <- na.omit(TestData)
ModelData[5934, ] <- NULL
ModelData[5934, ] <- NA
View(ModelData)
ModelData <- read.csv("CKD Screening Data for Model Building.csv")
TestData <- read.csv("CKD Screening Data for Testing.csv")
ModelData$ID <- NULL
TestData$ID <- NULL
ModelData$X <- NULL
TestData$X <- NULL
ModelData[5934, ] <- NA
ModelData <- na.omit(ModelData)
TestData <- na.omit(TestData)
ModelData$Racegrp <- droplevels(ModelData$Racegrp)
ModelData$CareSource <- droplevels(ModelData$CareSource)
rm(list=ls())
ModelData <- read.csv("CKD Screening Data for Model Building.csv")
TestData <- read.csv("CKD Screening Data for Testing.csv")
ModelData <- read.csv("CKD Screening Data for Model Building.csv")
TestData <- read.csv("CKD Screening Data for Testing.csv")
ModelData$ID <- NULL
TestData$ID <- NULL
ModelData$X <- NULL
TestData$X <- NULL
ModelData <- na.omit(ModelData)
TestData <- na.omit(TestData)
ModelData<-ModelData[-5934,]
ModelData <- read.csv("CKD Screening Data for Model Building.csv")
TestData <- read.csv("CKD Screening Data for Testing.csv")
ModelData$ID <- NULL
TestData$ID <- NULL
ModelData$X <- NULL
TestData$X <- NULL
ModelData<-ModelData[-5934,]
ModelData <- na.omit(ModelData)
TestData <- na.omit(TestData)
levels(ModelData$CareSource)
droplevels(ModelData$CareSource)
levels(ModelData$CareSource)
levels(ModelData$CareSource) <- droplevels(ModelData$CareSource)
levels(ModelData$CareSource)
rm(list = ls())
ModelData <- read.csv("CKD Screening Data for Model Building.csv")
TestData <- read.csv("CKD Screening Data for Testing.csv")
ModelData$ID <- NULL
TestData$ID <- NULL
ModelData$X <- NULL
TestData$X <- NULL
ModelData<-ModelData[-5934,] #Bad row. VERY bad row
ModelData <- na.omit(ModelData)
TestData <- na.omit(TestData)
ModelData$Racegrp <- droplevels(ModelData$Racegrp)
ModelData$CareSource <- droplevels(ModelData$CareSource)
levels(ModelData$Racegrp) <- levels(TestData$Racegrp)
levels(TestData$CareSource) <- levels(ModelData$CareSource)
levels(ModelData$CareSource)
levels(TestData$CareSource)
View(TestData)
TestData$Racegrp <- droplevels(TestData$Racegrp)
TestData$CareSource <- droplevels(TestData$CareSource)
rm(list=ls())
ModelData <- read.csv("CKD Screening Data for Model Building.csv")
TestData <- read.csv("CKD Screening Data for Testing.csv")
ModelData$ID <- NULL
TestData$ID <- NULL
ModelData$X <- NULL
TestData$X <- NULL
ModelData<-ModelData[-5934,] #Bad row. VERY bad row
ModelData <- na.omit(ModelData)
TestData <- na.omit(TestData)
ModelData$Racegrp <- droplevels(ModelData$Racegrp)
ModelData$CareSource <- droplevels(ModelData$CareSource)
TestData$Racegrp <- droplevels(TestData$Racegrp)
TestData$CareSource <- droplevels(TestData$CareSource)
levels(ModelData$Racegrp) <- levels(TestData$Racegrp)
levels(TestData$CareSource) <- levels(ModelData$CareSource)
ModelDataFactored <- ModelData
TestDataFactored <- TestData
source("Model-Factorize.R")
source("Test-Factorize.R")
ModelDataFactored <- na.omit(ModelDataFactored)
TestDataFactored <- na.omit(TestDataFactored)
set.seed(0305)
index <- createDataPartition(ModelDataFactored$CKD, p = 0.75, list = FALSE)
training <- ModelDataFactored[index,]
testing <- ModelDataFactored[-index,]
rf.tuning <- tuneRF(training[,-33], training$CKD, stepFactor=1.5)
rf <- randomForest(CKD~., data = training, ntree = 1000, mtry = 5)
#Tuning doesn't yield any productive results. Error = 0.05%
#Tuning plot included (/Plots/RF_tune.png)
#Plotting variable importance (/Plots/RF_varImp.png)
varImpPlot(rf, main = "Variable importance")
predVector <- predict(rf, newdata = testing)
predVector
table <- table(predVector, testing$CKD)
confusionMatrix(table, positive = "No")
TestDataRF <- TestDataFactored
TestDataRF$CKD <- predict(rf, newdata = TestDataRF, type="class")
write.csv(TestDataRF, file = "RandomForest.csv", row.names = F, quote = F)
TestDataRF <- NULL
set.seed(0305)
index <- createDataPartition(ModelDataFactored$CKD, p = 0.75, list = FALSE)
training <- ModelDataFactored[index,]
testing <- ModelDataFactored[-index,]
LogRes <- glm(CKD~., data = training, family="binomial")
summary(LogRes)
predVector <- predict(LogRes, newdata = testing, type = "response") #Seems like we have rank deficiency
table <- table(Predicted = predVector > 0.5, Actual = (testing$CKD == "Yes"))
confusionMatrix(table)
pred <- prediction(predVector, testing$CKD)
perf <- performance(pred, "tpr", "fpr")
plot(perf)
TestDataLR <- TestDataFactored
TestDataLR$CKD <- predict(LogRes, newdata = TestDataLR, type="response")
write.csv(TestDataRF, file = "LogisticRegression.csv", row.names = F, quote = F)
training <- NULL
testing <- NULL
TestDataKNN <- TestDataFactored
TestDataKNN$CKD <- predict(KNN_Final, newdata = TestDataLR, type="response")
ModelData <- na.omit(ModelData)
ModelDataScaled <- ModelDataFactored
ModelDataScaled <- sapply(ModelDataScaled[,-33], as.numeric)
ModelDataScaled <- as.data.frame(scale(ModelDataScaled[,-33]))
ModelDataScaled$CKD <- ModelDataFactored$CKD
index <- createDataPartition(ModelDataFactored$CKD, p = 0.75, list = FALSE)
training <- ModelDataScaled[index,]
set.seed(0305)
index <- createDataPartition(ModelDataFactored$CKD, p = 0.75, list = FALSE)
training <- ModelDataScaled[index,]
testing <- ModelDataScaled[-index,]
ctrl <- trainControl(method = "repeatedcv", number = 3, repeats = 3)
knnFit <- train(CKD~., data = training, method = "knn", trControl = ctrl, tuneLength = 20)
knnFit
KNN_Final <- knn(training[,-33], testing[,-33], cl = training$CKD, k = 17)
table(testing$CKD, KNN_Final)
confusionMatrix(KNN_Final, testing$CKD)
TestDataKNN <- TestDataFactored
TestDataKNN$CKD <- predict(KNN_Final, newdata = TestDataLR, type="response")
TestDataKNN$CKD <- KNN_Final
TestDataScaled <- TestDataFactored
TestDataScaled <- sapply(TestDataScaled, as.numeric)
TestDataScaled <- as.data.frame(TestDataScaled)
KNN_Pred <- knn(ModelDataScaled, TestDataScaled, cl = ModelDataScaled$CKD, k = 17)
KNN_Pred <- knn(ModelDataScaled[, -33], TestDataScaled, cl = ModelDataScaled$CKD, k = 17)
TestDataKNN <- TestDataScaled
TestDataKNN$CKD <- KNN_Pred
View(TestDataKNN)
View(TestDataKNN)
ModelDataScaled <- ModelDataFactored
TestDataScaled <- TestDataFactored
ModelDataScaled <- sapply(ModelDataScaled[,-33], as.numeric)
ModelDataScaled <- as.data.frame(scale(ModelDataScaled[,-33]))
ModelDataScaled$CKD <- ModelDataFactored$CKD
TestDataScaled <- sapply(TestDataScaled, as.numeric)
TestDataScaled <- as.data.frame(scale(TestDataScaled))
set.seed(0305)
index <- createDataPartition(ModelDataFactored$CKD, p = 0.75, list = FALSE)
training <- ModelDataScaled[index,]
testing <- ModelDataScaled[-index,]
KNN_Final <- knn(training[,-33], testing[,-33], cl = training$CKD, k = 17)
KNN_Pred <- knn(ModelDataScaled[, -33], TestDataScaled, cl = ModelDataScaled$CKD, k = 17)
KNN_Pred <- knn(ModelDataScaled[, -33], TestDataScaled, cl = ModelDataScaled$CKD, k = 17)
TestDataKNN <- TestDataFactored
TestDataKNN$CKD <- KNN_Pred
write.csv(TestDataKNN, file = "KNN.csv", row.names = F, quote = F)
ModelDataScaled <- NULL
TestDataScaled <- NULL
training <- NULL
testing <- NULL
index <- createDataPartition(ModelDataFactored$CKD, p = 0.75, list = FALSE)
training <- ModelDataFactored[index,]
testing <- ModelDataFactored[-index,]
ModelDataNum <- ModelDataFactored
indx <- sapply(ModelDataFactored, is.factor)
ModelDataNum[indx] <- lapply(ModelDataNum[indx], function(x) as.numeric(x))
print(cor(ModelDataNum), digits = 2)
TestDataLDA <- TestDataFactored
TestDataLDA$CKD <- predict(LDA, newdata = TestDataLDA)
LDA <- lda(CKD~.-Total.Chol-Weight-Fam.Hypertension-Female, data = training, cv = "TRUE")
TestDataLDA$CKD <- predict(LDA, newdata = TestDataLDA)
TestDataLDA$CKD <- predict(LDA, newdata = TestDataLDA)
TestDataLDA$CKD <- predict(LDA, newdata = TestDataLDA, type = "class")
LDApred <- predict(LDA, newdata = testing)
TestDataLDA$CKD <- (predict(LDA, newdata = TestDataLDA))$class
View(TestDataLDA)
newPred$class
newPred <- predict(LDA, newdata = TestDataLDA)
TestDataLDA <- TestDataFactored
TestDataLDA$CKD <- newPred$class
newPred$class
newPred
table(newPred$class)
write.csv(TestDataLDA, file = "LDA.csv", row.names = F, quote = F)
TestDataLR <- NULL
TestDataLDA <- NULL
set.seed(0007)
index <- createDataPartition(ModelDataFactored$CKD, p = 0.85, list = FALSE)
training <- ModelDataFactored[index,]
testing <- ModelDataFactored[-index,]
decTree <- rpart(CKD~., data = training, method = "class", control = rpart.control(cp = 0.0000001))
decTreePruned <- prune(decTree, cp = 0.01)
TestDataDT1 <- TestDataFactored
TestDataDT1$CKD <- predict(decTree, newdata = TestDataDT1, type = "class")
write.csv(TestDataDT1, file = "DecisionTreeUnpruned.csv", row.names = F, quote = F)
TestDataDT2 <- TestDataFactored
TestDataDT2$CKD <- predict(decTreePruned, newdata = TestDataDT2, type = "class")
write.csv(TestDataDT2, file = "DecisionTreePruned.csv", row.names = F, quote = F)
table1 <- NULL
table2 <- NULL
TestDataDT2 <- NULL
TestDataDT1 <- NULL
set.seed(0007)
index <- createDataPartition(ModelDataFactored$CKD, p = 0.85, list = FALSE)
training <- ModelDataFactored[index,]
testing <- ModelDataFactored[-index,]
cTree <- ctree(CKD~., data = training)
cTree
TestDataCT <- TestDataFactored
TestDataCT$CKD <- predict(cTree, newdata = TestDataCT)
write.csv(TestDataCT, file = "CTree.csv", row.names = F, quote = F)
TestDataCT <- NULL
TestDataNB <- TestDataFactored
TestDataNB$CKD <- predict(nb, newdata=TestDataNB)
set.seed(0305)
index <- createDataPartition(ModelDataFactored$CKD, p = 0.75, list = FALSE)
training <- ModelDataFactored[index,]
testing <- ModelDataFactored[-index,]
nb <- naiveBayes(CKD~., data=training,laplace=1)
TestDataNB <- TestDataFactored
TestDataNB$CKD <- predict(nb, newdata=TestDataNB)
write.csv(TestDataNB, file = "NaiveBayes.csv", row.names = F, quote = F)
TestDataLR <- TestDataFactored
TestDataLR$CKD <- predict(LogRes, newdata = TestDataLR, type="response")
write.csv(TestDataLR, file = "LogisticRegression.csv", row.names = F, quote = F)
TestDataRF <- NULL
TestDataLR <- NULL
install.packages("kernlab")
set.seed(0305)
index <- createDataPartition(ModelDataFactored$CKD, p = 0.75, list = FALSE)
training <- ModelDataFactored[index,]
testing <- ModelDataFactored[-index,]
obj_linear <-best.tune(svm, CKD~., data = training, kernel = "linear")
obj_linear
SVM <- svm(CKD~., data = training, kernel = "linear", gamma = 0.02564103, cost = 1)
predVector <- predict(SVM, newdata = testing)
plot(predVector)
table <- table(predVector, testing$CKD)
confusionMatrix(table)
confusionMatrix(table, positive = "No")
plot(SVM)
TestDataSVMLinear <- TestDataFactored
TestDataSVMLinear$CKD <- predict(SVM, newdata = TestDataSVMLinear)
write.csv(TestDataSVMLinear, file = "SVM_Linear.csv", row.names = F, quote = F)
plot(SVM_linear, TestDataSVMLinear, CKD ~ .)
SVM_linear <- svm(CKD~., data = training, kernel = "linear", gamma = 0.02564103, cost = 1)
plot(SVM_linear, TestDataSVMLinear, CKD ~ .)
obj_radial <- best.tune(svm, CKD~., data = training, kernel = "radial")
obj_radial
SVM_radial <- svm(CKD~., data = training, kernel = "radial", gamma = 0.02564103, cost = 1)
predVector <- NULL
SVM_linear <- svm(CKD~., data = training, kernel = "linear", gamma = 0.02564103, cost = 1)
predVector1 <- predict(SVM, newdata = testing)
table <- table(predVector1, testing$CKD)
predVector2 <- predict(SVM, newdata = testing)
plot(predVector2)
SVM_radial <- svm(CKD~., data = training, kernel = "radial", gamma = 0.02564103, cost = 1)
predVector2 <- predict(SVM, newdata = testing)
table2 <- table(predVector1, testing$CKD)
confusionMatrix(table2, positive = "No")
TestDataSVMRadial <- TestDataFactored
TestDataSVMRadial$CKD <- predict(SVM, newdata = TestDataSVMRadial)
write.csv(TestDataSVMLinear, file = "SVM_Radial.csv", row.names = F, quote = F)
obj_polynomial <- best.tune(svm, CKD~., data = training, kernel = "polynomial")
obj_polynomial
obj_radial
obj_polynomial
SVM_polynomial <- svm(CKD~., data = training, kernel = "polynomial", gamma = 0.02564103, cost = 1, degree = 3, coef.0 = 0)
TestDataSVMLinear$CKD <- predict(SVM_linear, newdata = TestDataSVMLinear)
write.csv(TestDataSVMLinear, file = "SVM_Linear.csv", row.names = F, quote = F)
SVM <- NULL
predVector1 <- predict(SVM_linear, newdata = testing)
table1 <- table(predVector1, testing$CKD)
confusionMatrix(table1, positive = "No")
TestDataSVMLinear <- TestDataFactored
TestDataSVMLinear$CKD <- predict(SVM_linear, newdata = TestDataSVMLinear)
write.csv(TestDataSVMLinear, file = "SVM_Linear.csv", row.names = F, quote = F)
SVM_radial <- svm(CKD~., data = training, kernel = "radial", gamma = 0.02564103, cost = 1)
predVector2 <- predict(SVM_radial, newdata = testing)
table2 <- table(predVector1, testing$CKD)
confusionMatrix(table2, positive = "No")
TestDataSVMRadial <- TestDataFactored
TestDataSVMRadial$CKD <- predict(SVM_radial, newdata = TestDataSVMRadial)
write.csv(TestDataSVMLinear, file = "SVM_Radial.csv", row.names = F, quote = F)
predVector3 <- predict(SVM_polynomial, testing$CKD)
SVM_polynomial <- svm(CKD~., data = training, kernel = "polynomial", gamma = 0.02564103, cost = 1, degree = 3, coef.0 = 0)
predVector3 <- predict(SVM_polynomial, testing$CKD)
predVector3 <- predict(SVM_polynomial, newdata = testing)
table3 <- table(predVector3, testing$CKD)
confusionMatrix(table3, positive = "No")
TestDataSVMPolynomial <- TestDataFactored
write.csv(TestDataSVMRadial, file = "SVM_Radial.csv", row.names = F, quote = F)
write.csv(TestDataSVMPolynomial, file = "SVM_Polynomial.csv", row.names = F, quote = F)
obj_sigmoid <- best.tune(svm, CKD~., data = training, kernel = "sigmoid")
obj_sigmoid
SVM_sigmoid <- svm(CKD~., data = training, kernel = "sigmoid", gamma = 0.02564103, cost = 1, coef.0 = 0)
predVector4 <- predict(SVM_sigmoid, newdata = testing)
table4 <- table(predVector4, testing$CKD)
confusionMatrix(table4, positive = "No")
TestDataSVMPolynomial$CKD <- predict(SVM_polynomial, newdata = TestDataSVMPolynomial)
write.csv(TestDataSVMPolynomial, file = "SVM_Polynomial.csv", row.names = F, quote = F)
write.csv(TestDataSVMSigmoid, file = "SVM_Sigmoid.csv", row.names = F, quote = F)
TestDataSVMSigmoid <- TestDataFactored
TestDataSVMSigmoid$CKD <- predict(SVM_sigmoid, newdata = TestDataSVMSigmoid)
write.csv(TestDataSVMSigmoid, file = "SVM_Sigmoid.csv", row.names = F, quote = F)
n <- names(training)
f <- as.formula(paste("CKD ~ ", paste(n[1:32], collapse = " + ")))
n <- names(training)
f <- as.formula(paste("CKD ~ ", paste(n[1:32], collapse = " + ")))
f
nn <- neuralnet(f, training, hidden = c(5,4), threshold = 0.03, stepmax = 5e+07, learningrate = 0.02, lifesign = full)
library(neuralnet)
nn <- neuralnet(f, training, hidden = c(5,4), threshold = 0.03, stepmax = 5e+07, learningrate = 0.02, lifesign = full)
nn <- neuralnet(f, training, hidden = c(5,4), threshold = 0.03, stepmax = 5e+07, learningrate = 0.02, lifesign = "full")
ModelDataNum <- sapply(ModelDataFactored[,-33], as.numeric)
index <- createDataPartition(ModelDataFactored$CKD, p = 0.75, list = FALSE)
library(caret)
library(caTools)
library(ROCR)
library(class)
library(MASS)
library(e1071)
library(rpart)
library(rpart.plot)
library(rattle)
library(randomForest3333333)
library(party)
library(neuralnet)
library(kernlab)
ModelDataNum <- sapply(ModelDataFactored[,-33], as.numeric)
index <- createDataPartition(ModelDataFactored$CKD, p = 0.75, list = FALSE)
training <- ModelDataNum[index,]
testing <- ModelDataNum[-index,]
n <- names(training)
f <- as.formula(paste("CKD ~ ", paste(n[1:32], collapse = " + ")))
f <- as.formula(paste("CKD ~ ", paste(n[1:32], collapse = " + ") ) )
f <- as.formula(paste('CKD ~ ', paste(n[1:32], collapse = ' + ') ) )
f <- as.formula(paste('CKD ~', paste(n[1:32], collapse = ' + ') ) )
n <- names(training)
f <- as.formula(paste('CKD ~', paste(n[1:32], collapse = ' + ') ) )
f <- as.formula(paste('CKD ~', paste(n[1:32], collapse = ' + ') ) )
f <- as.formula(paste('CKD ~', paste(n[1:32], collapse = ' + ') ) )
names <- paste(n[1:32], collapse = ' + ')
f <- as.formula(paste('CKD ~',  names))
f <- as.formula(paste('CKD ~', names))
f <- as.formula(paste('is_spam ~', paste(n[1:57], collapse = ' + ')))
paste()
paste("CKD ~ ")
paste("CKD ~ ", names)
names
n <- names(training)
names <- paste(n[1:32], collapse = ' + ')
nn <- neuralnet(f, training, hidden = c(5,4), threshold = 0.03, stepmax = 5e+07, learningrate = 0.02, lifesign = "full")
ModelDataNum <- ModelDataFactored$CKD
index <- createDataPartition(ModelDataFactored$CKD, p = 0.75, list = FALSE)
training <- ModelDataNum[index,]
index <- createDataPartition(ModelDataFactored$CKD, p = 0.75, list = FALSE)
training <- ModelDataNum[index,]
ModelDataNum <- sapply(ModelDataFactored[,-33], as.numeric)
ModelDataNum <- ModelDataFactored$CKD
index <- createDataPartition(ModelDataFactored$CKD, p = 0.75, list = FALSE)
ModelDataNum <- sapply(ModelDataFactored[,-33], as.numeric)
ModelDataNum <- sapply(ModelDataFactored[,-33], as.numeric)
ModelDataNum$CKD <- ModelDataFactored$CKD
ModelDataNum <- as.data.frame(sapply(ModelDataFactored[,-33], as.numeric))
ModelDataNum$CKD <- ModelDataFactored$CKD
View(ModelDataNum)
index <- createDataPartition(ModelDataFactored$CKD, p = 0.75, list = FALSE)
training <- ModelDataNum[index,]
testing <- ModelDataNum[-index,]
n <- names(training)
names <- paste(n[1:32], collapse = ' + ')
nn <- neuralnet(f, training, hidden = c(5,4), threshold = 0.03, stepmax = 5e+07, learningrate = 0.02, lifesign = "full")
ModelDataNum <- as.data.frame(sapply(ModelDataFactored, as.numeric))
index <- createDataPartition(ModelDataFactored$CKD, p = 0.75, list = FALSE)
training <- ModelDataNum[index,]
testing <- ModelDataNum[-index,]
n <- names(training)
names <- paste(n[1:32], collapse = ' + ')
nn <- neuralnet(f, training, hidden = c(5,4), threshold = 0.03, stepmax = 5e+07, learningrate = 0.02, lifesign = "full")
