source('C:/Users/babaj/Desktop/Code/CKD-Tessilk/CKD-Test.R')
areaUnderCurve <- performance(pred, "auc")@y.values
areaUnderCurve
View(ModelDataFactored)
source('C:/Users/babaj/Desktop/Code/CKD-Tessilk/CKD-Test.R')
ModelData <- read.csv("CKD Screening Data for Model Building.csv")
TestData <- read.csv("CKD Screening Data for Testing.csv")
ModelData$X <- NULL
TestData$X <- NULL
#Keep separate copy of datasets, start factorizing variables in new copies
ModelDataFactored <- ModelData
TestDataFactored <- TestData
source("Model-Factorize.R")
source("Test-Factorize.R")
ModelDataFactored <- na.omit(ModelDataFactored)
TestDataFactored <- na.omit(TestDataFactored)
TrainScaled <- as.data.frame(scale(ModelData))
nums <- sapply(ModelDataFactored, is.numeric)
ModelDataScaled <- as.data.frame(scale(ModelDataFactored[, nums]))
TestDataScaked <- as.data.frame(scale(TestDataFactored[, nums]))
KNN <- knn (ModelDataScaled, TestDataScaked, cl = ModelScaked$CKD, k = 3)
??knn
library(caret)
library(caTools)
library(ROCR)
source('C:/Users/babaj/Desktop/Code/CKD-Tessilk/CKD-Test.R')
KNN <- knn (ModelDataScaled, TestDataScaked, cl = ModelScaked$CKD, k = 3)
library(caret)
library(caTools)
library(ROCR)
KNN <- knn(ModelDataScaled, TestDataScaked, cl = ModelScaked$CKD, k = 3)
??knn
library(class)
KNN <- knn(ModelDataScaled, TestDataScaked, cl = ModelScaked$CKD, k = 3)
KNN <- knn(ModelDataScaled, TestDataScaked, cl = ModelScaled$CKD, k = 3)
KNN <- knn(ModelDataScaled, TestDataScaked, cl = ModelDataScaled$CKD, k = 3)
View(TestDataScaked)
KNN <- knn(ModelDataScaled, TestDataScaked, cl = ModelDataScaled$CKD, k = 3)
ModelDataScaled <- na.omit(ModelDataScaled)
TestDataScaked <- na.omit(TestDataScaked)
KNN <- knn(ModelDataScaled, TestDataScaked, cl = ModelDataScaled$CKD, k = 3)
KNN <- knn(ModelDataScaled, TestDataScaked, cl = ModelDataFactored$CKD, k = 3)
knnFit <- train(CKD~., data = ModelDataScaled, method = "knn", trControl = ctrl, tuneLength = 20)
knnFit <- train(CKD~., data = ModelDataFactored, method = "knn", trControl = ctrl, tuneLength = 20)
ctrl <- trainControl(method = "repeatedcv", number = 3, repeats = 3)
knnFit <- train(CKD~., data = ModelDataFactored, method = "knn", trControl = ctrl, tuneLength = 20)
ModelDataScaled <- ModelDataFactored
TestDataScaked <- TestDataFactored
ModelDataScaled[, nums] <- as.data.frame(scale(ModelDataFactored[, nums]))
TestDataScaked[, nums] <- as.data.frame(scale(TestDataFactored[, nums]))
View(TestDataScaked)
ModelDataScaled <- na.omit(ModelDataScaled)
TestDataScaked <- na.omit(TestDataScaked)
KNN <- knn(ModelDataScaled, TestDataScaked, cl = ModelDataFactored$CKD, k = 3)
KNN <- knn(ModelDataScaled, TestDataScaked, cl = ModelDataScaled$CKD, k = 3)
View(ModelDataScaled)
, nums
ModelDataScaled <- ModelDataFactored
TestDataScaked <- TestDataFactored
nums <- sapply(ModelDataFactored, is.numeric)
ModelDataScaled[, nums] <- as.data.frame(scale(ModelDataFactored[, nums]))
TestDataScaked[, nums] <- as.data.frame(scale(TestDataFactored[, nums]))
ModelDataScaled <- na.omit(ModelDataScaled)
TestDataScaked <- na.omit(TestDataScaked)
KNN <- knn(ModelDataScaled, TestDataScaked, cl = ModelDataScaled$CKD, k = 3)
View(ModelDataScaled)
View(TestDataScaked)
View(TestData)
ModelData <- read.csv("CKD Screening Data for Model Building.csv")
TestData <- read.csv("CKD Screening Data for Testing.csv")
ModelData$ID <- NULL
TestData$ID <- NULL
View(ModelData)
ModelData$X <- NULL
TestData$X <- NULL
ModelDataFactored <- ModelData
TestDataFactored <- TestData
source("Model-Factorize.R")
source("Test-Factorize.R")
ModelDataFactored <- na.omit(ModelDataFactored)
TestDataFactored <- na.omit(TestDataFactored)
ModelDataScaled <- ModelDataFactored
TestDataScaked <- TestDataFactored
nums <- sapply(ModelDataFactored, is.numeric)
ModelDataScaled[, nums] <- as.data.frame(scale(ModelDataFactored[, nums]))
TestDataScaked[, nums] <- as.data.frame(scale(TestDataFactored[, nums]))
ModelDataScaled <- na.omit(ModelDataScaled)
TestDataScaked <- na.omit(TestDataScaked)
KNN <- knn(ModelDataScaled, TestDataScaked, cl = ModelDataScaled$CKD, k = 3)
length(cl)
length(ModelDataScaled$CKD)
dim(ModelDataScaled)
dim(TestDataScaled)
dim(ModelDataScaked)
dim(TestDataScaked)
training <- NULL
testing <- NULL
TestDataScaked <- NULL
index <- createDataPartition(ModelDataFactored$CKD, p = 0.75, list = FALSE)
training <- ModelDataScaled[index,]
testing <- ModelDataScaled[-index,]
KNN <- knn(training, testing, cl = training$CKD, k = 3)
View(testing)
ModelDataScaled <- ModelData
nums <- sapply(ModelDataFactored, is.numeric)
ModelDataScaled[, nums] <- as.data.frame(scale(ModelDataFactored[, nums]))
index <- createDataPartition(ModelDataFactored$CKD, p = 0.75, list = FALSE)
training <- ModelDataScaled[index,]
testing <- ModelDataScaled[-index,]
ModelDataScaled <- ModelData
nums <- sapply(ModelDataFactored, is.numeric)
ModelDataScaled[, nums] <- as.data.frame(scale(ModelDataFactored[, nums]))
ModelDataScaled[, nums] <- as.data.frame(scale(ModelData[, nums]))
index <- createDataPartition(ModelDataFactored$CKD, p = 0.75, list = FALSE)
training <- ModelDataScaled[index,]
testing <- ModelDataScaled[-index,]
KNN <- knn(training, testing, cl = training$CKD, k = 3)
View(ModelDataScaled)
ModelDataScaled <- na.omit(ModelDataScaled)
nums <- sapply(ModelDataFactored, is.numeric)
ModelDataScaled[, nums] <- as.data.frame(scale(ModelData[, nums]))
ModelDataScaled <- ModelData
ModelDataScaled <- na.omit(ModelDataScaled)
nums <- sapply(ModelDataFactored, is.numeric)
ModelDataScaled[, nums] <- as.data.frame(scale(ModelData[, nums]))
warnings()
index <- createDataPartition(ModelDataFactored$CKD, p = 0.75, list = FALSE)
training <- ModelDataScaled[index,]
testing <- ModelDataScaled[-index,]
KNN <- knn(training, testing, cl = training$CKD, k = 3)
View(ModelData)
ModelDataScaled[, nums] <- as.data.frame(scale(ModelData[, nums]))
ModelData <- na.omit(ModelData)
ModelDataScaled <- ModelData
nums <- sapply(ModelDataFactored, is.numeric)
ModelDataScaled[, nums] <- as.data.frame(scale(ModelData[, nums]))
index <- createDataPartition(ModelDataFactored$CKD, p = 0.75, list = FALSE)
training <- ModelDataScaled[index,]
testing <- ModelDataScaled[-index,]
KNN <- knn(training, testing, cl = training$CKD, k = 3)
View(ModelData)
ModelDataScaled <- as.data.frame(scale(ModelData[, nums]))
index <- createDataPartition(ModelDataFactored$CKD, p = 0.75, list = FALSE)
training <- ModelDataScaled[index,]
testing <- ModelDataScaled[-index,]
KNN <- knn(training, testing, cl = training$CKD, k = 3)
View(ModelDataScaled)
ModelDataScaled$CKD = ModelData$CKD
index <- createDataPartition(ModelDataFactored$CKD, p = 0.75, list = FALSE)
training <- ModelDataScaled[index,]
testing <- ModelDataScaled[-index,]
KNN <- knn(training, testing, cl = training$CKD, k = 3)
#Now let's try finding the best k
ctrl <- trainControl(method = "repeatedcv", number = 3, repeats = 3)
knnFit <- train(CKD~., data = ModelDataFactored, method = "knn", trControl = ctrl, tuneLength = 20)
knnFit
KNN-Final <- knn(training, testing, cl = training$CKD, k = 19)
KNN_Final <- knn(training, testing, cl = training$CKD, k = 19)
table(testing$CKD, KNN_Final)
plot(KNN_Final)
confusionMatrix(knnFinal, testing$CKD)
confusionMatrix(KNN_Final, testing$CKD)
knnFit <- train(CKD~., data = training, method = "knn", trControl = ctrl, tuneLength = 20)
ModelDataScaled$CKD = factor(ModelData$CKD, labels = c("Yes", "No"), levels = c(1, 0))
index <- createDataPartition(ModelDataFactored$CKD, p = 0.75, list = FALSE)
training <- ModelDataScaled[index,]
testing <- ModelDataScaled[-index,]
KNN <- knn(training, testing, cl = training$CKD, k = 3)
ctrl <- trainControl(method = "repeatedcv", number = 3, repeats = 3)
knnFit <- train(CKD~., data = training, method = "knn", trControl = ctrl, tuneLength = 20)
ModelDataScaled < - <- sapply(ModelDataFactored, as.numeric)
ModelDataScaled <- sapply(ModelDataFactored, as.numeric)
View(ModelDataScaled)
ModelDataScaled <- as.data.frame(scale(ModelDataScaled))
index <- createDataPartition(ModelDataFactored$CKD, p = 0.75, list = FALSE)
training <- ModelDataScaled[index,]
testing <- ModelDataScaled[-index,]
KNN <- knn(training, testing, cl = training$CKD, k = 3)
ctrl <- trainControl(method = "repeatedcv", number = 3, repeats = 3)
knnFit <- train(CKD~., data = training, method = "knn", trControl = ctrl, tuneLength = 20)
knnFit
KNN_Final <- knn(training, testing, cl = training$CKD, k = 19)
table(testing$CKD, KNN_Final)
confusionMatrix(KNN_Final, testing$CKD)
library(class)
library(MASS)
library(e1071)
LDA <- lda(CKD~., data = ModelDataFactored)
LDApred <- predict(LDA, newdata = TestDataFactored)
confusionMatrix
confusionMatrix(LDApred$class, TestDataFactored$CKD, positive = "TRUE")
library(caret)
library(caTools)
library(ROCR)
library(class)
library(MASS)
library(e1071)
confusionMatrix(LDApred$class, TestDataFactored$CKD, positive = "TRUE")
LDApred$class$levels
LDApred$class
TestDataFactored$CKD
View(TestDataFactored)
LDA <- lda(CKD~., data = training)
LDA <- lda(CKD~., data = training)
View(training)
ModelData <- read.csv("CKD Screening Data for Model Building.csv")
TestData <- read.csv("CKD Screening Data for Testing.csv")
ModelData$ID <- NULL
rm(list=ls())
library(caret)
library(caTools)
library(ROCR)
library(class)
library(MASS)
library(e1071)
ModelData <- read.csv("CKD Screening Data for Model Building.csv")
TestData <- read.csv("CKD Screening Data for Testing.csv")
ModelData$ID <- NULL
TestData$ID <- NULL
ModelData$X <- NULL
TestData$X <- NULL
ModelDataFactored <- ModelData
TestDataFactored <- TestData
source("Model-Factorize.R")
source("Test-Factorize.R")
ModelDataFactored <- na.omit(ModelDataFactored)
TestDataFactored <- na.omit(TestDataFactored)
index <- createDataPartition(ModelDataFactored$CKD, p = 0.75, list = FALSE)
training <- ModelDataFactored[index,]
testing <- ModelDataFactored[-index,]
LDA <- lda(CKD~., data = training)
View(ModelDataFactored)
LDA <- lda(CKD~., data = training, cv = "TRUE")
LDApred <- predict(LDA, newdata = testing)
confusionMatrix(LDApred$class, testing$CKD, positive = "TRUE")
confusionMatrix(LDApred$class, testing$CKD)
confusionMatrix(LDApred$class, testing$CKD, positive = "Yes")
confusionMatrix(KNN_Final, testing$CKD)
ModelData <- na.omit(ModelData)
ModelDataScaled <- ModelData
ModelDataScaled <- ModelDataFactored
ModelDataScaled <- sapply(ModelDataScaled, as.numeric)
ModelDataScaled <- as.data.frame(scale(ModelDataScaled))
index <- createDataPartition(ModelDataFactored$CKD, p = 0.75, list = FALSE)
training <- ModelDataScaled[index,]
testing <- ModelDataScaled[-index,]
KNN <- knn(training, testing, cl = training$CKD, k = 3)
#Now let's try finding the best k
ctrl <- trainControl(method = "repeatedcv", number = 3, repeats = 3)
knnFit <- train(CKD~., data = training, method = "knn", trControl = ctrl, tuneLength = 20)
knnFit
KNN_Final <- knn(training, testing, cl = training$CKD, k = 27)
table(testing$CKD, KNN_Final)
confusionMatrix(KNN_Final, testing$CKD)
training$CKD <- factor(training$CKD, labels = c("Yes", "No"), levels=c(1,0))
KNN_Final <- knn(training, testing, cl = training$CKD, k = 27)
cor(ModelDataScaled)
ModelDataNum <- ModelDataFactored
ModelDataNum <- sapply(ModelDataScaled, as.numeric)
cor(ModelDataNum)
View(ModelDataFactored)
ModelDataNum <- ModelDataFactored
ModelDataNum <- sapply(ModelDataNum, as.numeric)
cor(ModelDataNum)
View(ModelDataNum)
print(cor(ModelDataNum), digits = 3)
print(cor(ModelDataNum), digits = 2)
print(cor(ModelDataNum), digits = 1)
print(cor(ModelDataNum), digits = 1)
print(cor(ModelDataNum), digits = 0)
print(cor(ModelDataNum), digits = 1)
print(cor(ModelDataNum), digits = 2)
print(cor(ModelDataNum), digits = 2)
ModelDataNum$TotalChol <- NULL
print(cor(ModelDataNum), digits = 2)
ModelDataNum <- as.data.frame(sapply(ModelDataNum, as.numeric))
print(cor(ModelDataNum), digits = 2)
print(cor(ModelDataNum), digits = 2)
ModelDataNum$TotalChol <- NULL
ModelDataNum <- ModelDataFactored
ModelDataNum <- sapply(ModelDataNum, as.numeric)
print(cor(ModelDataNum), digits = 2)
ModelDataNum$TotalChol <- NULL
print(cor(ModelDataNum), digits = 2)
ModelDataNum <- ModelDataFactored
View(ModelDataNum)
ModelDataNum <- apply(ModelDataNum, as.numeric)
ModelDataNum <- as.numeric(ModelDataNum)
ModelDataNum <- apply(ModelDataNum, as.numeric)
ModelDataNum <- apply(ModelDataNum, FUN = "as.numeric")
ModelDataNum <- as.numeric(ModelDataNum)
ModelDataNum <- as.matrix(sapply(ModelDataNum, as.numeric))
ModelDataNum <- ModelDataFactored
ModelDataNum <- as.matrix(sapply(ModelDataNum, as.numeric))
print(cor(ModelDataNum), digits = 2)
ModelDataNum$TotalChol <- NULL
print(cor(ModelDataNum), digits = 2)
ModelDataNum <- as.matrix(sapply(ModelDataNum, as.numeric))
ModelDataNum <- as.data.frame(sapply(ModelDataNum, as.numeric))
print(cor(ModelDataNum), digits = 2)
ModelDataNum <- as.matrix(lapply(ModelDataNum, as.numeric))
print(cor(ModelDataNum), digits = 2)
ModelDataNum <- as.matrix(as.numeric(ModelDataNum))
ModelDataNum <- as.matrix(as.numeric(ModelDataNum))
ModelDataNum <- data.matrix(ModelDataNum)
print(cor(ModelDataNum), digits = 2)
ModelDataNum <- as.numeric(ModelDataNum)
ModelDataNum <- as.numeric(data.matrix(ModelDataNum))
ModelDataNum <- data.matrix(ModelDataNum)
ModelDataNum <- ModelDataFactored
ModelDataNum <- as.numeric(ModelDataNum)
ModelDataNum <- ModelDataFactored
indx <- sapply(ModelDataFactored, is.factor)
ModelDataNum[indx] <- lapply(ModelDataNum[indx], function(x) as.numeric(as.character(x)))
print(cor(ModelDataNum), digits = 2)
ModelDataNum$TotalChol <- as.numeric(ModelDataNum)
ModelDataNum[indx] <- lapply(ModelDataNum[indx], function(x) as.numeric(as.character(x)))
ModelDataNum <- ModelDataFactored
View(ModelDataNum)
indx <- sapply(ModelDataFactored, is.factor)
ModelDataNum[indx] <- lapply(ModelDataNum[indx], function(x) as.numeric(as.character(x)))
ModelDataNum <- ModelDataFactored
indx <- sapply(ModelDataFactored, is.factor)
ModelDataNum[indx] <- lapply(ModelDataNum[indx], function(x) as.numeric(x))
print(cor(ModelDataNum), digits = 2)
ModelDataNum$TotalChol <- as.numeric(ModelDataNum)
ModelDataNum$TotalChol <- NULL
print(cor(ModelDataNum), digits = 2)
print(cor(ModelDataNum), digits = 2)
LDA <- lda(CKD~.-TotalChol, data = training, cv = "TRUE")
LDA <- lda(CKD~., data = training, cv = "TRUE")
LDA <- lda(CKD~.-TotalChol, data = training, cv = "TRUE")
View(training)
index <- createDataPartition(ModelDataFactored$CKD, p = 0.75, list = FALSE)
training <- ModelDataFactored[index,]
testing <- ModelDataFactored[-index,]
ModelDataNum <- ModelDataFactored
indx <- sapply(ModelDataFactored, is.factor)
ModelDataNum[indx] <- lapply(ModelDataNum[indx], function(x) as.numeric(x))
print(cor(ModelDataNum), digits = 2)
ModelDataNum$TotalChol <- NULL
ModelDataNum$Weight <- NULL
LDA <- lda(CKD~.-TotalChol, data = training, cv = "TRUE")
LDA <- lda(CKD~.-Total.Chol, data = training, cv = "TRUE")
LDA <- lda(CKD~.-Total.Chol-Weight, data = training, cv = "TRUE")
print(cor(ModelDataNum), digits = 2)
ModelDataNum$Fam.Hypertension <- NULL
LDA <- lda(CKD~.-Total.Chol-Weight-Fam.Hypertension, data = training, cv = "TRUE")
print(cor(ModelDataNum), digits = 2)
print(cor(ModelDataNum), digits = 2)
print(cor(ModelDataNum), digits = 2)
LDA <- lda(CKD~.-Total.Chol-Weight-Fam.Hypertension-Female, data = training, cv = "TRUE")
LDApred <- predict(LDA, newdata = testing)
confusionMatrix(LDApred$class, testing$CKD, positive = "No")
